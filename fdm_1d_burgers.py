# -*- coding: utf-8 -*-
"""FDM_1D_Burgers.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12k0tkrSrnX_YLrb6F-4Mu0M-2i43By1n
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import math

# Step 1: Initialize domain and parameters
def initialize():
    nx = 1001       # spatial points
    nt = 1001       # time steps
    x = np.linspace(-1, 1, nx, dtype=np.float64)
    dx = x[1] - x[0]
    dt = 0.001
    nu = 0.01 / math.pi
    return x, nx, nt, dx, dt, nu

# Step 2: Initial condition
def initial_condition(x):
    return -np.sin(np.pi * x).astype(np.float64)

# Step 3: Burgers' equation solver
def solve_burgers(u, nt, nx, dx, dt, nu):
    uf = np.zeros((nt, nx), dtype=np.float64)
    uf[0, 1:-1] = u[1:-1]  # store initial condition (interior points)

    for n in range(1, nt):
        un = u.copy()
        for i in range(1, nx - 1):  # update only interior points
            u[i] = un[i] - un[i] * (dt / dx) * (un[i] - un[i - 1]) \
                   + nu * dt / dx**2 * (un[i + 1] - 2 * un[i] + un[i - 1])
            uf[n, i] = u[i]  # store only updated point
    return u, uf

# Step 4: Plotting functions
def plot_initial_final(x, uf):
    plt.figure(figsize=(8, 5))
    plt.plot(x[1:-1], uf[0, 1:-1], label='Initial', linestyle='--')
    plt.plot(x[1:-1], uf[-1, 1:-1], label='Final', color='crimson')
    plt.title('Initial vs Final (1D Burgers Equation)')
    plt.xlabel('x')
    plt.ylabel('u')
    plt.grid(True)
    plt.legend()
    plt.show()

def plot_heatmap(uf):
    sns.set_style("white")
    plt.figure(figsize=(8, 5))
    sns.heatmap(uf[:, 1:-1].T, cmap='jet', cbar=True)
    plt.title('Solution Evolution (Time vs Space)')
    plt.xlabel('Time Step')
    plt.ylabel('Spatial Index (interior)')
    plt.tight_layout()
    plt.show()

  # Step 5: Run everything
if __name__ == "__main__":
    x, nx, nt, dx, dt, nu = initialize()
    u0 = initial_condition(x)
    u_final, uf_all = solve_burgers(u0.copy(), nt, nx, dx, dt, nu)

    plot_initial_final(x, uf_all)
    plot_heatmap(uf_all)

